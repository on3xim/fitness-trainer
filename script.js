class AITrainer {
    constructor() {
        this.exerciseLibrary = {
            chest: [
                { name: "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª–µ–∂–∞", sets: "4", reps: "8-12", rest: "90 —Å–µ–∫" },
                { name: "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π", sets: "3", reps: "10-15", rest: "75 —Å–µ–∫" },
                { name: "–†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≥–∞–Ω—Ç–µ–ª–µ–π", sets: "3", reps: "12-15", rest: "60 —Å–µ–∫" },
                { name: "–û—Ç–∂–∏–º–∞–Ω–∏—è", sets: "3", reps: "–º–∞–∫—Å", rest: "60 —Å–µ–∫" }
            ],
            back: [
                { name: "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", sets: "4", reps: "6-12", rest: "90 —Å–µ–∫" },
                { name: "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ", sets: "4", reps: "8-12", rest: "90 —Å–µ–∫" },
                { name: "–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞", sets: "3", reps: "10-15", rest: "75 —Å–µ–∫" },
                { name: "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –æ–¥–Ω–æ–π —Ä—É–∫–æ–π", sets: "3", reps: "10-12", rest: "60 —Å–µ–∫" }
            ],
            legs: [
                { name: "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π", sets: "4", reps: "6-10", rest: "120 —Å–µ–∫" },
                { name: "–ñ–∏–º –Ω–æ–≥–∞–º–∏", sets: "3", reps: "10-15", rest: "90 —Å–µ–∫" },
                { name: "–í—ã–ø–∞–¥—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏", sets: "3", reps: "10-12", rest: "75 —Å–µ–∫" },
                { name: "–°–≥–∏–±–∞–Ω–∏—è –Ω–æ–≥ –ª–µ–∂–∞", sets: "3", reps: "12-15", rest: "60 —Å–µ–∫" }
            ],
            shoulders: [
                { name: "–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —Å—Ç–æ—è", sets: "4", reps: "8-12", rest: "90 —Å–µ–∫" },
                { name: "–ú–∞—Ö–∏ –≥–∞–Ω—Ç–µ–ª—è–º–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã", sets: "3", reps: "12-15", rest: "60 —Å–µ–∫" },
                { name: "–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É", sets: "3", reps: "10-12", rest: "75 —Å–µ–∫" },
                { name: "–†–∞–∑–≤–µ–¥–µ–Ω–∏—è –≤ –Ω–∞–∫–ª–æ–Ω–µ", sets: "3", reps: "12-15", rest: "60 —Å–µ–∫" }
            ],
            arms: [
                { name: "–ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å", sets: "3", reps: "10-12", rest: "75 —Å–µ–∫" },
                { name: "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º", sets: "3", reps: "10-15", rest: "75 —Å–µ–∫" },
                { name: "–ú–æ–ª–æ—Ç–∫–æ–≤—ã–µ —Å–≥–∏–±–∞–Ω–∏—è", sets: "3", reps: "12-15", rest: "60 —Å–µ–∫" },
                { name: "–†–∞–∑–≥–∏–±–∞–Ω–∏—è –Ω–∞ –±–ª–æ–∫–µ", sets: "3", reps: "12-15", rest: "60 —Å–µ–∫" }
            ],
            cardio: [
                { name: "–ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞", sets: "1", reps: "20-30 –º–∏–Ω", rest: "-" },
                { name: "–í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä", sets: "1", reps: "25-35 –º–∏–Ω", rest: "-" },
                { name: "–≠–ª–ª–∏–ø—Å–æ–∏–¥", sets: "1", reps: "20-30 –º–∏–Ω", rest: "-" },
                { name: "–°–∫–∞–∫–∞–ª–∫–∞", sets: "5", reps: "2-3 –º–∏–Ω", rest: "30 —Å–µ–∫" }
            ]
        };
    }

    generateProgram(formData) {
        const { goal, level, age, weight, height, equipment, days } = formData;
        
        const heightM = height / 100;
        const bmi = (weight / (heightM * heightM)).toFixed(1);
        
        let program = `
            <div class="program-header">
                <h4>üìä –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</h4>
                <p><strong>–í–æ–∑—Ä–∞—Å—Ç:</strong> ${age} –ª–µ—Ç</p>
                <p><strong>–í–µ—Å/–†–æ—Å—Ç:</strong> ${weight} –∫–≥ / ${height} —Å–º</p>
                <p><strong>–ò–ú–¢:</strong> ${bmi} (${this.getBMICategory(bmi)})</p>
                <p><strong>–¶–µ–ª—å:</strong> ${this.getGoalText(goal)}</p>
                <p><strong>–£—Ä–æ–≤–µ–Ω—å:</strong> ${this.getLevelText(level)}</p>
                <p><strong>–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:</strong> ${this.getEquipmentText(equipment)}</p>
                <p><strong>–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é:</strong> ${days}</p>
            </div>
        `;

        program += this.generateDetailedWorkoutPlan(goal, level, days, equipment);
        program += this.generateNutritionAdvice(goal, weight, height, age);
        program += this.generateRecoveryTips(level, age, days);

        return program;
    }

    generateDetailedWorkoutPlan(goal, level, days, equipment) {
        let plan = `<div class="program-detail"><h4>üí™ –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</h4>`;
        
        const workoutTemplates = this.getWorkoutTemplate(goal, level, days);
        
        workoutTemplates.forEach((workout, index) => {
            plan += `<div class="workout-day"><h5>${workout.day}</h5>`;
            plan += `<p><em>${workout.focus}</em></p>`;
            
            workout.exercises.forEach(muscleGroup => {
                const exercises = this.exerciseLibrary[muscleGroup];
                if (exercises) {
                    exercises.slice(0, 2).forEach(exercise => {
                        plan += `
                            <div class="exercise-item">
                                <h5>${exercise.name}</h5>
                                <div class="exercise-stats">
                                    <span>–ü–æ–¥—Ö–æ–¥—ã: ${exercise.sets}</span>
                                    <span>–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: ${exercise.reps}</span>
                                    <span>–û—Ç–¥—ã—Ö: ${exercise.rest}</span>
                                </div>
                            </div>
                        `;
                    });
                }
            });
            
            plan += `</div>`;
        });
        
        plan += `</div>`;
        return plan;
    }

    getWorkoutTemplate(goal, level, days) {
        const templates = {
            weight_loss: {
                2: [
                    { day: "–î–µ–Ω—å 1: Full Body + –ö–∞—Ä–¥–∏–æ", focus: "–í—Å–µ —Ç–µ–ª–æ + –∂–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ", exercises: ['chest', 'back', 'legs', 'cardio'] },
                    { day: "–î–µ–Ω—å 2: Full Body + HIIT", focus: "–í—Å–µ —Ç–µ–ª–æ + –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã", exercises: ['shoulders', 'arms', 'legs', 'cardio'] }
                ],
                3: [
                    { day: "–î–µ–Ω—å 1: –í–µ—Ä—Ö —Ç–µ–ª–∞ + –ö–∞—Ä–¥–∏–æ", focus: "–ì—Ä—É–¥—å, —Å–ø–∏–Ω–∞, –ø–ª–µ—á–∏", exercises: ['chest', 'back', 'shoulders', 'cardio'] },
                    { day: "–î–µ–Ω—å 2: –ù–æ–≥–∏ + –ü—Ä–µ—Å—Å", focus: "–ù–æ–≥–∏, —è–≥–æ–¥–∏—Ü—ã, –∫–æ—Ä–∞", exercises: ['legs', 'cardio'] },
                    { day: "–î–µ–Ω—å 3: Full Body + HIIT", focus: "–ö—Ä—É–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", exercises: ['chest', 'back', 'legs', 'cardio'] }
                ]
            },
            muscle_gain: {
                3: [
                    { day: "–î–µ–Ω—å 1: –ì—Ä—É–¥—å + –¢—Ä–∏—Ü–µ–ø—Å", focus: "–°–∏–ª–æ–≤–æ–π –∂–∏–º", exercises: ['chest', 'arms'] },
                    { day: "–î–µ–Ω—å 2: –°–ø–∏–Ω–∞ + –ë–∏—Ü–µ–ø—Å", focus: "–¢—è–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è", exercises: ['back', 'arms'] },
                    { day: "–î–µ–Ω—å 3: –ù–æ–≥–∏ + –ü–ª–µ—á–∏", focus: "–ë–∞–∑–∞ + –¥–µ–ª—å—Ç—ã", exercises: ['legs', 'shoulders'] }
                ],
                4: [
                    { day: "–î–µ–Ω—å 1: –ì—Ä—É–¥—å", focus: "–û–±—ä–µ–º–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", exercises: ['chest'] },
                    { day: "–î–µ–Ω—å 2: –°–ø–∏–Ω–∞", focus: "–®–∏—Ä–∏–Ω–∞ –∏ —Ç–æ–ª—â–∏–Ω–∞", exercises: ['back'] },
                    { day: "–î–µ–Ω—å 3: –ù–æ–≥–∏", focus: "–°–∏–ª–∞ –∏ –º–∞—Å—Å–∞", exercises: ['legs'] },
                    { day: "–î–µ–Ω—å 4: –ü–ª–µ—á–∏ + –†—É–∫–∏", focus: "–î–µ–ª—å—Ç—ã –∏ –±–∏—Ü–µ–ø—Å/—Ç—Ä–∏—Ü–µ–ø—Å", exercises: ['shoulders', 'arms'] }
                ]
            }
        };

        return templates[goal]?.[days] || templates['weight_loss'][3];
    }

    getBMICategory(bmi) {
        if (bmi < 18.5) return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –≤–µ—Å";
        if (bmi < 25) return "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å";
        if (bmi < 30) return "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å";
        return "–û–∂–∏—Ä–µ–Ω–∏–µ";
    }

    generateNutritionAdvice(goal, weight, height, age) {
        const bmr = 10 * weight + 6.25 * height - 5 * age + 5;
        let dailyCalories, protein, carbs, fat;
        
        switch(goal) {
            case 'weight_loss':
                dailyCalories = Math.round(bmr * 1.2 - 500);
                protein = Math.round(weight * 2.2);
                carbs = Math.round((dailyCalories * 0.4) / 4);
                fat = Math.round((dailyCalories * 0.25) / 9);
                break;
            case 'muscle_gain':
                dailyCalories = Math.round(bmr * 1.4 + 300);
                protein = Math.round(weight * 2.2);
                carbs = Math.round((dailyCalories * 0.5) / 4);
                fat = Math.round((dailyCalories * 0.25) / 9);
                break;
            default:
                dailyCalories = Math.round(bmr * 1.3);
                protein = Math.round(weight * 1.8);
                carbs = Math.round((dailyCalories * 0.45) / 4);
                fat = Math.round((dailyCalories * 0.3) / 9);
        }
        
        return `
            <div class="program-detail">
                <h4>üçé –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:</h4>
                <p><strong>–°—É—Ç–æ—á–Ω–∞—è –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π:</strong> ${dailyCalories} –∫–∫–∞–ª</p>
                <p><strong>–ë–µ–ª–∫–∏:</strong> ${protein}–≥ –≤ –¥–µ–Ω—å</p>
                <p><strong>–£–≥–ª–µ–≤–æ–¥—ã:</strong> ${carbs}–≥ –≤ –¥–µ–Ω—å</p>
                <p><strong>–ñ–∏—Ä—ã:</strong> ${fat}–≥ –≤ –¥–µ–Ω—å</p>
                <p><strong>–í–æ–¥–∞:</strong> 2-3 –ª–∏—Ç—Ä–∞ –≤ –¥–µ–Ω—å</p>
                <p><strong>–†–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è:</strong> 4-5 –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏ –∫–∞–∂–¥—ã–µ 3-4 —á–∞—Å–∞</p>
            </div>
        `;
    }

    generateRecoveryTips(level, age, days) {
        return `
            <div class="program-detail">
                <h4>üõå –ü–ª–∞–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:</h4>
                <p><strong>–°–æ–Ω:</strong> 7-9 —á–∞—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ</p>
                <p><strong>–†–∞—Å—Ç—è–∂–∫–∞:</strong> 10-15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</p>
                <p><strong>–î–Ω–∏ –æ—Ç–¥—ã—Ö–∞:</strong> ${7 - days} –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é - –∞–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ</p>
                <p><strong>–í–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å:</strong> 35–º–ª –Ω–∞ 1–∫–≥ –≤–µ—Å–∞</p>
                <p><strong>–°—Ç—Ä–µ—Ç—á–∏–Ω–≥:</strong> –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞—Å—Ç—è–∂–∫–∞ 5-10 –º–∏–Ω—É—Ç</p>
            </div>
        `;
    }

    getGoalText(goal) {
        const goals = {
            'weight_loss': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
            'muscle_gain': '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
            'strength': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã',
            'endurance': '–†–∞–∑–≤–∏—Ç–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
            'toning': '–¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞'
        };
        return goals[goal] || goal;
    }

    getLevelText(level) {
        const levels = {
            'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'intermediate': '–°—Ä–µ–¥–Ω–∏–π',
            'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
        };
        return levels[level] || level;
    }

    getEquipmentText(equipment) {
        const equipmentMap = {
            'full_gym': '–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª',
            'basic_gym': '–ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã',
            'home': '–î–æ–º–∞—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'bodyweight': '–¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞'
        };
        return equipmentMap[equipment] || equipment;
    }

    async answerQuestion(question) {
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        const responses = {
            '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?',
            '–∫–∞–∫ –Ω–∞—á–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É.',
            '–ø–∏—Ç–∞–Ω–∏–µ': '–ü–∏—Ç–∞–Ω–∏–µ - —ç—Ç–æ 70% —É—Å–ø–µ—Ö–∞! –°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Ü–µ–ª—è–º.',
            '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–∫ –∂–µ –≤–∞–∂–Ω–æ, –∫–∞–∫ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –°–ø–∏—Ç–µ 7-9 —á–∞—Å–æ–≤ –∏ –ø–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã.',
            '–º–æ—Ç–∏–≤–∞—Ü–∏—è': '–ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ –º–∞—Ä–∞—Ñ–æ–Ω, –∞ –Ω–µ —Å–ø—Ä–∏–Ω—Ç! –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!'
        };

        const lowerQuestion = question.toLowerCase();
        
        for (const [key, response] of Object.entries(responses)) {
            if (lowerQuestion.includes(key)) {
                return response;
            }
        }

        return '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è –≤–∞—à–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ, –∏ —è —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Ç—Ä–µ–Ω–µ—Ä–∞
const aiTrainer = new AITrainer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
document.getElementById('fitness-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
        goal: document.getElementById('goal').value,
        level: document.getElementById('level').value,
        age: document.getElementById('age').value,
        weight: document.getElementById('weight').value,
        height: document.getElementById('height').value,
        equipment: document.getElementById('equipment').value,
        days: document.getElementById('days').value
    };

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('result').classList.add('hidden');

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
    setTimeout(() => {
        const program = aiTrainer.generateProgram(formData);
        document.getElementById('program-output').innerHTML = program;
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('result').classList.remove('hidden');
    }, 2000);
});

// –§—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞
function addMessage(message, isUser = false) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
    
    messageDiv.innerHTML = `
        <div class="message-avatar">${isUser ? 'üë§' : 'ü§ñ'}</div>
        <div class="message-content">
            <p>${message}</p>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

async function sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, true);
    input.value = '';
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI
    const response = await aiTrainer.answerQuestion(message);
    addMessage(response, false);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —á–∞—Ç–µ
document.getElementById('chat-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function scrollToTrainer() {
    document.querySelector('.trainer-section').scrollIntoView({ 
        behavior: 'smooth' 
    });
}

function scrollToChat() {
    document.querySelector('.chat-section').scrollIntoView({ 
        behavior: 'smooth' 
    });
}

function saveProgram() {
    const programText = document.getElementById('program-output').innerText;
    const blob = new Blob([programText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = '–º–æ—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.txt';
    a.click();
    URL.revokeObjectURL(url);
    
    alert('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
}
